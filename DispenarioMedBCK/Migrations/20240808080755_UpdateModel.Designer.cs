// <auto-generated />
using System;
using DispenarioMedBCK.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DispenarioMedBCK.Migrations
{
    [DbContext(typeof(DispensarioMedContext))]
    [Migration("20240808080755_UpdateModel")]
    partial class UpdateModel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DispenarioMedBCK.Models.Area", b =>
                {
                    b.Property<int>("IdAreas")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_Areas");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAreas"));

                    b.Property<string>("Habitacion")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("IdDoctor")
                        .HasColumnType("int")
                        .HasColumnName("ID_Doctor");

                    b.Property<int?>("Ubicacionarea")
                        .HasColumnType("int");

                    b.HasKey("IdAreas")
                        .HasName("PK__Areas__D121A76AC8CD052C");

                    b.HasIndex("IdDoctor");

                    b.HasIndex("Ubicacionarea");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("DispenarioMedBCK.Models.AuditoriaPaciente", b =>
                {
                    b.Property<int>("IdPaciente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_PACIENTE");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPaciente"));

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Canton")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FechaNacimiento")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Fecha_nacimiento");

                    b.Property<string>("Genero")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Provincia")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdPaciente")
                        .HasName("PK__Auditori__62CD58D730486225");

                    b.ToTable("AuditoriaPacientes");
                });

            modelBuilder.Entity("DispenarioMedBCK.Models.CitasCanceladasHistorial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CitaMedica")
                        .HasColumnType("int");

                    b.Property<int?>("Estado")
                        .HasColumnType("int");

                    b.Property<int?>("EstadoCita")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__CitasCan__3214EC27130C6547");

                    b.HasIndex("CitaMedica");

                    b.HasIndex("Estado");

                    b.HasIndex("EstadoCita");

                    b.ToTable("CitasCanceladasHistorial", (string)null);
                });

            modelBuilder.Entity("DispenarioMedBCK.Models.CitasMedica", b =>
                {
                    b.Property<int>("Idcita")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDCita");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idcita"));

                    b.Property<int>("IdhorarioCitas")
                        .HasColumnType("int")
                        .HasColumnName("IDHorarioCitas");

                    b.Property<int>("Idmedico")
                        .HasColumnType("int")
                        .HasColumnName("IDMedico");

                    b.Property<int>("Idpaciente")
                        .HasColumnType("int")
                        .HasColumnName("IDPaciente");

                    b.Property<int?>("Motivo")
                        .HasColumnType("int");

                    b.HasKey("Idcita")
                        .HasName("PK__Citas_Me__36D350AB96C80FB3");

                    b.HasIndex("IdhorarioCitas");

                    b.HasIndex("Idmedico");

                    b.HasIndex("Idpaciente");

                    b.HasIndex("Motivo");

                    b.ToTable("Citas_Medicas", (string)null);
                });

            modelBuilder.Entity("DispenarioMedBCK.Models.CostoServicio", b =>
                {
                    b.Property<int>("IdcostServi")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDCostServi");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdcostServi"));

                    b.Property<double?>("Costos")
                        .HasColumnType("float");

                    b.Property<double?>("Descuentos")
                        .HasColumnType("float");

                    b.Property<int?>("Idmcm")
                        .HasColumnType("int")
                        .HasColumnName("IDMCM");

                    b.HasKey("IdcostServi")
                        .HasName("PK__CostoSer__7BF738B10E8CA20E");

                    b.HasIndex("Idmcm");

                    b.ToTable("CostoServicios");
                });

            modelBuilder.Entity("DispenarioMedBCK.Models.Especialidad", b =>
                {
                    b.Property<int>("Idespecialidad")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDEspecialidad");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idespecialidad"));

                    b.Property<string>("Especialidad1")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("Especialidad");

                    b.HasKey("Idespecialidad")
                        .HasName("PK__Especial__A265362FE232932A");

                    b.ToTable("Especialidad", (string)null);
                });

            modelBuilder.Entity("DispenarioMedBCK.Models.Estado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Estados")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__Estados__3214EC2790EC5EA7");

                    b.ToTable("Estados");
                });

            modelBuilder.Entity("DispenarioMedBCK.Models.EstadoHoraCita", b =>
                {
                    b.Property<int>("IdEstadhocita")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_Estadhocita");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEstadhocita"));

                    b.Property<string>("Disponibilidad")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdEstadhocita")
                        .HasName("PK__EstadoHo__9F83B2AF6433C155");

                    b.ToTable("EstadoHoraCitas");
                });

            modelBuilder.Entity("DispenarioMedBCK.Models.Factura", b =>
                {
                    b.Property<int>("IdFactura")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_Factura");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdFactura"));

                    b.Property<double?>("Costo")
                        .HasColumnType("float")
                        .HasColumnName("costo");

                    b.Property<int?>("FechaVisita")
                        .HasColumnType("int");

                    b.Property<int?>("IdMedico")
                        .HasColumnType("int")
                        .HasColumnName("ID_Medico");

                    b.Property<int?>("IdPaciente")
                        .HasColumnType("int")
                        .HasColumnName("ID_Paciente");

                    b.Property<double?>("Iva")
                        .HasColumnType("float");

                    b.Property<int?>("Motivo")
                        .HasColumnType("int");

                    b.Property<double?>("Subtotal")
                        .HasColumnType("float");

                    b.Property<double?>("Total")
                        .HasColumnType("float");

                    b.HasKey("IdFactura")
                        .HasName("PK__Factura__E9D586A89F80C469");

                    b.HasIndex("FechaVisita");

                    b.HasIndex("IdMedico");

                    b.HasIndex("IdPaciente");

                    b.HasIndex("Motivo");

                    b.ToTable("Factura", (string)null);
                });

            modelBuilder.Entity("DispenarioMedBCK.Models.HistorialMedico", b =>
                {
                    b.Property<int>("IdHistorial")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_Historial");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdHistorial"));

                    b.Property<string>("Diagnostico")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("FechaVisita")
                        .HasColumnType("int");

                    b.Property<int?>("IdMedico")
                        .HasColumnType("int")
                        .HasColumnName("ID_Medico");

                    b.Property<int?>("IdPaciente")
                        .HasColumnType("int")
                        .HasColumnName("ID_Paciente");

                    b.Property<string>("Receta")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Sintomas")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Tratamiento")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("IdHistorial")
                        .HasName("PK__Historia__ECA89454CFFD2FAB");

                    b.HasIndex("FechaVisita");

                    b.HasIndex("IdMedico");

                    b.HasIndex("IdPaciente");

                    b.ToTable("Historial_Medico", (string)null);
                });

            modelBuilder.Entity("DispenarioMedBCK.Models.HorariosCita", b =>
                {
                    b.Property<int>("IdHorario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_HORARIO");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdHorario"));

                    b.Property<int?>("Areas")
                        .HasColumnType("int");

                    b.Property<int?>("Disponibeid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaFin")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaHora")
                        .HasColumnType("datetime");

                    b.Property<int?>("IdDoctor")
                        .HasColumnType("int")
                        .HasColumnName("ID_Doctor");

                    b.HasKey("IdHorario")
                        .HasName("PK__Horarios__CDBBBA340C455B37");

                    b.HasIndex("Areas");

                    b.HasIndex("Disponibeid");

                    b.HasIndex("IdDoctor");

                    b.ToTable("HorariosCitas", t =>
                        {
                            t.HasTrigger("trigger_Horacitas");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("DispenarioMedBCK.Models.Medico", b =>
                {
                    b.Property<int>("IdMedico")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_medico");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMedico"));

                    b.Property<string>("Apellidos")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Cedula")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("CodigoMedico")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CorreoElectronico")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DireccionDomicilio")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Especialidad")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("Especialidadid")
                        .HasColumnType("int");

                    b.Property<string>("Genero")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<string>("Nombres")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NumCelular")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Telefono")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("UbicacionDisp")
                        .HasColumnType("int");

                    b.HasKey("IdMedico")
                        .HasName("PK__Medico__4595B547CA102C9C");

                    b.HasIndex("UbicacionDisp");

                    b.HasIndex(new[] { "Especialidad" }, "idx_EspeMedi");

                    b.ToTable("Medico", (string)null);
                });

            modelBuilder.Entity("DispenarioMedBCK.Models.MetodoPago", b =>
                {
                    b.Property<int>("IdMetPago")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_MetPago");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMetPago"));

                    b.Property<string>("Metodo")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)");

                    b.HasKey("IdMetPago")
                        .HasName("PK__MetodoPa__70C3951FCBE418CD");

                    b.ToTable("MetodoPago", (string)null);
                });

            modelBuilder.Entity("DispenarioMedBCK.Models.MotivosCitasMedica", b =>
                {
                    b.Property<int>("Idmotivo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDMotivo");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idmotivo"));

                    b.Property<int?>("EspecialiMed")
                        .HasColumnType("int")
                        .HasColumnName("especialiMed");

                    b.Property<string>("Servicio")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.HasKey("Idmotivo")
                        .HasName("PK__MotivosC__2133556BE3EDDC6F");

                    b.HasIndex("EspecialiMed");

                    b.ToTable("MotivosCitasMedicas");
                });

            modelBuilder.Entity("DispenarioMedBCK.Models.Paciente", b =>
                {
                    b.Property<int>("IdPaciente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_PACIENTE");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPaciente"));

                    b.Property<string>("Apellidos")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Canton")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("canton");

                    b.Property<string>("Cedula")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("CorreoElectronico")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Direccion")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FechaNacimiento")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Fecha_nacimiento");

                    b.Property<string>("Genero")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Nombres")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NumCelular")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Provincia")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdPaciente")
                        .HasName("PK__paciente__62CD58D7B919577C");

                    b.ToTable("pacientes", null, t =>
                        {
                            t.HasTrigger("trigger_audipaciente");

                            t.HasTrigger("trigger_audiupdpaciente");

                            t.HasTrigger("trigger_pacientes");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("DispenarioMedBCK.Models.PagosRealizado", b =>
                {
                    b.Property<int>("IdMetPago")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_MetPago");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMetPago"));

                    b.Property<int?>("IdMetodoPago")
                        .HasColumnType("int")
                        .HasColumnName("idMetodoPago");

                    b.Property<int?>("IdMotivo")
                        .HasColumnType("int")
                        .HasColumnName("idMotivo");

                    b.Property<int?>("IdPaciente")
                        .HasColumnType("int");

                    b.HasKey("IdMetPago")
                        .HasName("PK__PagosRea__70C3951F3FCE1D41");

                    b.HasIndex("IdMetodoPago");

                    b.HasIndex("IdPaciente");

                    b.ToTable("PagosRealizados");
                });

            modelBuilder.Entity("DispenarioMedBCK.Models.Rol", b =>
                {
                    b.Property<int>("Idrol")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDRol");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idrol"));

                    b.Property<string>("Rol1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Rol");

                    b.HasKey("Idrol")
                        .HasName("PK__Rol__A681ACB68AC0969A");

                    b.ToTable("Rol", (string)null);
                });

            modelBuilder.Entity("DispenarioMedBCK.Models.TelefonosPaciente", b =>
                {
                    b.Property<int>("IdTelefono")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_Telefono");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTelefono"));

                    b.Property<int?>("IdPaciente")
                        .HasColumnType("int")
                        .HasColumnName("ID_Paciente");

                    b.Property<string>("NumeroTelefono")
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("varchar(14)");

                    b.HasKey("IdTelefono")
                        .HasName("PK__Telefono__80E081E4257A4AF3");

                    b.ToTable("TelefonosPacientes");
                });

            modelBuilder.Entity("DispenarioMedBCK.Models.Ubicacion", b =>
                {
                    b.Property<int>("Idubicacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDUbicacion");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idubicacion"));

                    b.Property<string>("Direccion")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Sector")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Idubicacion")
                        .HasName("PK__Ubicacio__B4CA90FC9200DF7D");

                    b.ToTable("Ubicacion", (string)null);
                });

            modelBuilder.Entity("DispenarioMedBCK.Models.UsuariosMedico", b =>
                {
                    b.Property<int>("IdmedUsuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDMedUsuario");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdmedUsuario"));

                    b.Property<string>("Activa")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<byte[]>("HashedContrasena")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varbinary(64)");

                    b.Property<int?>("IdDatosUsuario")
                        .HasColumnType("int")
                        .HasColumnName("ID_DatosUsuario");

                    b.Property<int?>("Rol")
                        .HasColumnType("int");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varbinary(32)");

                    b.Property<string>("Usuario")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdmedUsuario")
                        .HasName("PK__Usuarios__C7A46E980AEACB32");

                    b.HasIndex("IdDatosUsuario");

                    b.HasIndex("Rol");

                    b.HasIndex(new[] { "Usuario" }, "UQ__Usuarios__E3237CF7FC7367FA")
                        .IsUnique()
                        .HasFilter("[Usuario] IS NOT NULL");

                    b.ToTable("UsuariosMedico", (string)null);
                });

            modelBuilder.Entity("DispenarioMedBCK.Models.UsuariosPaciente", b =>
                {
                    b.Property<int>("Idusuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDUsuario");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idusuario"));

                    b.Property<string>("Activa")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<byte[]>("HashedContrasena")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varbinary(64)");

                    b.Property<int?>("IdDatosUsuario")
                        .HasColumnType("int")
                        .HasColumnName("ID_DatosUsuario");

                    b.Property<int?>("Rol")
                        .HasColumnType("int");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varbinary(32)");

                    b.Property<string>("Usuario")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Idusuario")
                        .HasName("PK__Usuarios__52311169E4593A9B");

                    b.HasIndex("IdDatosUsuario");

                    b.HasIndex("Rol");

                    b.HasIndex(new[] { "Usuario" }, "UQ__Usuarios__E3237CF708381395")
                        .IsUnique()
                        .HasFilter("[Usuario] IS NOT NULL");

                    b.ToTable("UsuariosPaciente", (string)null);
                });

            modelBuilder.Entity("DispenarioMedBCK.Models.UsuariosinactivosHistorial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Estado")
                        .HasColumnType("int");

                    b.Property<int?>("Medicos")
                        .HasColumnType("int");

                    b.Property<int?>("Pacientes")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Usuarios__3214EC27B8948748");

                    b.HasIndex("Estado");

                    b.HasIndex("Medicos");

                    b.HasIndex("Pacientes");

                    b.ToTable("UsuariosinactivosHistorial", (string)null);
                });

            modelBuilder.Entity("DispenarioMedBCK.Models.Area", b =>
                {
                    b.HasOne("DispenarioMedBCK.Models.Medico", "IdDoctorNavigation")
                        .WithMany("Areas")
                        .HasForeignKey("IdDoctor")
                        .IsRequired()
                        .HasConstraintName("MEDICoFK2");

                    b.HasOne("DispenarioMedBCK.Models.Ubicacion", "UbicacionareaNavigation")
                        .WithMany("Areas")
                        .HasForeignKey("Ubicacionarea")
                        .HasConstraintName("areaubifk");

                    b.Navigation("IdDoctorNavigation");

                    b.Navigation("UbicacionareaNavigation");
                });

            modelBuilder.Entity("DispenarioMedBCK.Models.CitasCanceladasHistorial", b =>
                {
                    b.HasOne("DispenarioMedBCK.Models.CitasMedica", "CitaMedicaNavigation")
                        .WithMany("CitasCanceladasHistorials")
                        .HasForeignKey("CitaMedica")
                        .HasConstraintName("CtCn");

                    b.HasOne("DispenarioMedBCK.Models.Estado", "EstadoNavigation")
                        .WithMany("CitasCanceladasHistorials")
                        .HasForeignKey("Estado")
                        .HasConstraintName("Estdct");

                    b.HasOne("DispenarioMedBCK.Models.EstadoHoraCita", "EstadoCitaNavigation")
                        .WithMany("CitasCanceladasHistorials")
                        .HasForeignKey("EstadoCita")
                        .HasConstraintName("Estct");

                    b.Navigation("CitaMedicaNavigation");

                    b.Navigation("EstadoCitaNavigation");

                    b.Navigation("EstadoNavigation");
                });

            modelBuilder.Entity("DispenarioMedBCK.Models.CitasMedica", b =>
                {
                    b.HasOne("DispenarioMedBCK.Models.HorariosCita", "IdhorarioCitasNavigation")
                        .WithMany("CitasMedicas")
                        .HasForeignKey("IdhorarioCitas")
                        .IsRequired()
                        .HasConstraintName("horariocitafk");

                    b.HasOne("DispenarioMedBCK.Models.Medico", "IdmedicoNavigation")
                        .WithMany("CitasMedicas")
                        .HasForeignKey("Idmedico")
                        .IsRequired()
                        .HasConstraintName("medicfk");

                    b.HasOne("DispenarioMedBCK.Models.Paciente", "IdpacienteNavigation")
                        .WithMany("CitasMedicas")
                        .HasForeignKey("Idpaciente")
                        .IsRequired()
                        .HasConstraintName("pcientffk");

                    b.HasOne("DispenarioMedBCK.Models.MotivosCitasMedica", "MotivoNavigation")
                        .WithMany("CitasMedicas")
                        .HasForeignKey("Motivo")
                        .HasConstraintName("motivfk");

                    b.Navigation("IdhorarioCitasNavigation");

                    b.Navigation("IdmedicoNavigation");

                    b.Navigation("IdpacienteNavigation");

                    b.Navigation("MotivoNavigation");
                });

            modelBuilder.Entity("DispenarioMedBCK.Models.CostoServicio", b =>
                {
                    b.HasOne("DispenarioMedBCK.Models.MotivosCitasMedica", "IdmcmNavigation")
                        .WithMany("CostoServicios")
                        .HasForeignKey("Idmcm")
                        .HasConstraintName("Motivosfk");

                    b.Navigation("IdmcmNavigation");
                });

            modelBuilder.Entity("DispenarioMedBCK.Models.Factura", b =>
                {
                    b.HasOne("DispenarioMedBCK.Models.HorariosCita", "FechaVisitaNavigation")
                        .WithMany("Facturas")
                        .HasForeignKey("FechaVisita")
                        .HasConstraintName("Citafk2");

                    b.HasOne("DispenarioMedBCK.Models.Medico", "IdMedicoNavigation")
                        .WithMany("Facturas")
                        .HasForeignKey("IdMedico")
                        .HasConstraintName("mediccofk2");

                    b.HasOne("DispenarioMedBCK.Models.Paciente", "IdPacienteNavigation")
                        .WithMany("Facturas")
                        .HasForeignKey("IdPaciente")
                        .HasConstraintName("pcientefk2");

                    b.HasOne("DispenarioMedBCK.Models.MotivosCitasMedica", "MotivoNavigation")
                        .WithMany("Facturas")
                        .HasForeignKey("Motivo")
                        .HasConstraintName("Motivofk");

                    b.Navigation("FechaVisitaNavigation");

                    b.Navigation("IdMedicoNavigation");

                    b.Navigation("IdPacienteNavigation");

                    b.Navigation("MotivoNavigation");
                });

            modelBuilder.Entity("DispenarioMedBCK.Models.HistorialMedico", b =>
                {
                    b.HasOne("DispenarioMedBCK.Models.HorariosCita", "FechaVisitaNavigation")
                        .WithMany("HistorialMedicos")
                        .HasForeignKey("FechaVisita")
                        .HasConstraintName("Citafk");

                    b.HasOne("DispenarioMedBCK.Models.Medico", "IdMedicoNavigation")
                        .WithMany("HistorialMedicos")
                        .HasForeignKey("IdMedico")
                        .HasConstraintName("mediccofk");

                    b.HasOne("DispenarioMedBCK.Models.Paciente", "IdPacienteNavigation")
                        .WithMany("HistorialMedicos")
                        .HasForeignKey("IdPaciente")
                        .HasConstraintName("pcientefk");

                    b.Navigation("FechaVisitaNavigation");

                    b.Navigation("IdMedicoNavigation");

                    b.Navigation("IdPacienteNavigation");
                });

            modelBuilder.Entity("DispenarioMedBCK.Models.HorariosCita", b =>
                {
                    b.HasOne("DispenarioMedBCK.Models.Area", "AreasNavigation")
                        .WithMany("HorariosCita")
                        .HasForeignKey("Areas")
                        .HasConstraintName("Areahfk");

                    b.HasOne("DispenarioMedBCK.Models.EstadoHoraCita", "Disponibe")
                        .WithMany("HorariosCita")
                        .HasForeignKey("Disponibeid")
                        .HasConstraintName("Disponifk");

                    b.HasOne("DispenarioMedBCK.Models.Medico", "IdDoctorNavigation")
                        .WithMany("HorariosCita")
                        .HasForeignKey("IdDoctor")
                        .HasConstraintName("MEDICoFK");

                    b.Navigation("AreasNavigation");

                    b.Navigation("Disponibe");

                    b.Navigation("IdDoctorNavigation");
                });

            modelBuilder.Entity("DispenarioMedBCK.Models.Medico", b =>
                {
                    b.HasOne("DispenarioMedBCK.Models.Ubicacion", "UbicacionDispNavigation")
                        .WithMany("Medicos")
                        .HasForeignKey("UbicacionDisp")
                        .HasConstraintName("Ubicafk");

                    b.Navigation("UbicacionDispNavigation");
                });

            modelBuilder.Entity("DispenarioMedBCK.Models.MotivosCitasMedica", b =>
                {
                    b.HasOne("DispenarioMedBCK.Models.Especialidad", "EspecialiMedNavigation")
                        .WithMany("MotivosCitasMedicas")
                        .HasForeignKey("EspecialiMed")
                        .HasConstraintName("espicalfk");

                    b.Navigation("EspecialiMedNavigation");
                });

            modelBuilder.Entity("DispenarioMedBCK.Models.PagosRealizado", b =>
                {
                    b.HasOne("DispenarioMedBCK.Models.MetodoPago", "IdMetodoPagoNavigation")
                        .WithMany("PagosRealizados")
                        .HasForeignKey("IdMetodoPago")
                        .HasConstraintName("Metodopg");

                    b.HasOne("DispenarioMedBCK.Models.Paciente", "IdPacienteNavigation")
                        .WithMany("PagosRealizados")
                        .HasForeignKey("IdPaciente")
                        .HasConstraintName("pcintefk2");

                    b.Navigation("IdMetodoPagoNavigation");

                    b.Navigation("IdPacienteNavigation");
                });

            modelBuilder.Entity("DispenarioMedBCK.Models.UsuariosMedico", b =>
                {
                    b.HasOne("DispenarioMedBCK.Models.Medico", "IdDatosUsuarioNavigation")
                        .WithMany("UsuariosMedicos")
                        .HasForeignKey("IdDatosUsuario")
                        .HasConstraintName("Usuariomedfk");

                    b.HasOne("DispenarioMedBCK.Models.Rol", "RolNavigation")
                        .WithMany("UsuariosMedicos")
                        .HasForeignKey("Rol")
                        .HasConstraintName("Rolfkk2");

                    b.Navigation("IdDatosUsuarioNavigation");

                    b.Navigation("RolNavigation");
                });

            modelBuilder.Entity("DispenarioMedBCK.Models.UsuariosPaciente", b =>
                {
                    b.HasOne("DispenarioMedBCK.Models.Paciente", "IdDatosUsuarioNavigation")
                        .WithMany("UsuariosPacientes")
                        .HasForeignKey("IdDatosUsuario")
                        .HasConstraintName("UsuarioPCTfk");

                    b.HasOne("DispenarioMedBCK.Models.Rol", "RolNavigation")
                        .WithMany("UsuariosPacientes")
                        .HasForeignKey("Rol")
                        .HasConstraintName("Rolfk");

                    b.Navigation("IdDatosUsuarioNavigation");

                    b.Navigation("RolNavigation");
                });

            modelBuilder.Entity("DispenarioMedBCK.Models.UsuariosinactivosHistorial", b =>
                {
                    b.HasOne("DispenarioMedBCK.Models.Estado", "EstadoNavigation")
                        .WithMany("UsuariosinactivosHistorials")
                        .HasForeignKey("Estado")
                        .HasConstraintName("Estd");

                    b.HasOne("DispenarioMedBCK.Models.Medico", "MedicosNavigation")
                        .WithMany("UsuariosinactivosHistorials")
                        .HasForeignKey("Medicos")
                        .HasConstraintName("medinac");

                    b.HasOne("DispenarioMedBCK.Models.Paciente", "PacientesNavigation")
                        .WithMany("UsuariosinactivosHistorials")
                        .HasForeignKey("Pacientes")
                        .HasConstraintName("pcieninac");

                    b.Navigation("EstadoNavigation");

                    b.Navigation("MedicosNavigation");

                    b.Navigation("PacientesNavigation");
                });

            modelBuilder.Entity("DispenarioMedBCK.Models.Area", b =>
                {
                    b.Navigation("HorariosCita");
                });

            modelBuilder.Entity("DispenarioMedBCK.Models.CitasMedica", b =>
                {
                    b.Navigation("CitasCanceladasHistorials");
                });

            modelBuilder.Entity("DispenarioMedBCK.Models.Especialidad", b =>
                {
                    b.Navigation("MotivosCitasMedicas");
                });

            modelBuilder.Entity("DispenarioMedBCK.Models.Estado", b =>
                {
                    b.Navigation("CitasCanceladasHistorials");

                    b.Navigation("UsuariosinactivosHistorials");
                });

            modelBuilder.Entity("DispenarioMedBCK.Models.EstadoHoraCita", b =>
                {
                    b.Navigation("CitasCanceladasHistorials");

                    b.Navigation("HorariosCita");
                });

            modelBuilder.Entity("DispenarioMedBCK.Models.HorariosCita", b =>
                {
                    b.Navigation("CitasMedicas");

                    b.Navigation("Facturas");

                    b.Navigation("HistorialMedicos");
                });

            modelBuilder.Entity("DispenarioMedBCK.Models.Medico", b =>
                {
                    b.Navigation("Areas");

                    b.Navigation("CitasMedicas");

                    b.Navigation("Facturas");

                    b.Navigation("HistorialMedicos");

                    b.Navigation("HorariosCita");

                    b.Navigation("UsuariosMedicos");

                    b.Navigation("UsuariosinactivosHistorials");
                });

            modelBuilder.Entity("DispenarioMedBCK.Models.MetodoPago", b =>
                {
                    b.Navigation("PagosRealizados");
                });

            modelBuilder.Entity("DispenarioMedBCK.Models.MotivosCitasMedica", b =>
                {
                    b.Navigation("CitasMedicas");

                    b.Navigation("CostoServicios");

                    b.Navigation("Facturas");
                });

            modelBuilder.Entity("DispenarioMedBCK.Models.Paciente", b =>
                {
                    b.Navigation("CitasMedicas");

                    b.Navigation("Facturas");

                    b.Navigation("HistorialMedicos");

                    b.Navigation("PagosRealizados");

                    b.Navigation("UsuariosPacientes");

                    b.Navigation("UsuariosinactivosHistorials");
                });

            modelBuilder.Entity("DispenarioMedBCK.Models.Rol", b =>
                {
                    b.Navigation("UsuariosMedicos");

                    b.Navigation("UsuariosPacientes");
                });

            modelBuilder.Entity("DispenarioMedBCK.Models.Ubicacion", b =>
                {
                    b.Navigation("Areas");

                    b.Navigation("Medicos");
                });
#pragma warning restore 612, 618
        }
    }
}
